generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Pet {
  id        String   @id @default(cuid())
  name      String
  ownerName String
  photo     String
  age       Int
  notes     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  accounts       Account[]
  sessions       Session[]
  pets           Pet[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authenticator Authenticator[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
